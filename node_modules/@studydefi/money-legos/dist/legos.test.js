"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var legos_1 = require("./legos");
var networks_1 = __importDefault(require("./networks"));
test("can get legos for mainnet", function () {
    var legos = legos_1.getLegosFor(networks_1.default.mainnet);
    expect(legos).toMatchSnapshot();
});
describe("recursive changeAddressValue function", function () {
    test("can replace address value", function () {
        var _a;
        var input = {
            foo: {
                address: (_a = {},
                    _a[networks_1.default.mainnet] = "mainnet_foo_address",
                    _a[networks_1.default.ropsten] = "ropsten_foo_address",
                    _a),
            },
        };
        expect(legos_1.changeAddressValue(networks_1.default.mainnet, input)).toStrictEqual({
            foo: { address: "mainnet_foo_address" },
        });
    });
    test("can replace nested address value", function () {
        var _a;
        var input = {
            foo: {
                bar: {
                    address: (_a = {},
                        _a[networks_1.default.mainnet] = "mainnet_foo.bar_address",
                        _a[networks_1.default.ropsten] = "ropsten_foo.bar_address",
                        _a),
                },
            },
        };
        expect(legos_1.changeAddressValue(networks_1.default.ropsten, input)).toStrictEqual({
            foo: { bar: { address: "ropsten_foo.bar_address" } },
        });
    });
    test("can replace address value multiple times", function () {
        var _a, _b;
        var input = {
            foo: { address: (_a = {}, _a[networks_1.default.mainnet] = "mainnet_foo_address", _a) },
            bar: { address: (_b = {}, _b[networks_1.default.mainnet] = "mainnet_bar_address", _b) },
        };
        expect(legos_1.changeAddressValue(networks_1.default.mainnet, input)).toStrictEqual({
            foo: { address: "mainnet_foo_address" },
            bar: { address: "mainnet_bar_address" },
        });
    });
    test("use null if address for network does not exist", function () {
        var _a, _b, _c;
        var input = {
            foo: { address: (_a = {}, _a[networks_1.default.mainnet] = "mainnet_foo_address", _a) },
            bar: { address: (_b = {}, _b[networks_1.default.mainnet] = "mainnet_bar_address", _b) },
            baz: { address: (_c = {}, _c[networks_1.default.mainnet] = "mainnet_baz_address", _c) },
        };
        expect(legos_1.changeAddressValue(networks_1.default.ropsten, input)).toStrictEqual({
            foo: { address: null },
            bar: { address: null },
            baz: { address: null },
        });
    });
});
