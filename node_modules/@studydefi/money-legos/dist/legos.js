"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var erc20_1 = __importDefault(require("./erc20"));
var compound_1 = __importDefault(require("./compound"));
var maker_1 = __importDefault(require("./maker"));
var uniswap_1 = __importDefault(require("./uniswap"));
exports.rawLegos = {
    erc20: erc20_1.default,
    compound: compound_1.default,
    maker: maker_1.default,
    uniswap: uniswap_1.default,
};
exports.getLegosFor = function (networkId) {
    return exports.changeAddressValue(networkId, exports.rawLegos);
};
var isValidObject = function (obj) { return typeof obj === "object" && obj !== null; };
// Recursively goes through each field, and changes the address value to the specific value
// i.e. compound.cDai.address[mainnet] = 0x...
//      becomes:
//      compound.cDai.address = 0x....
exports.changeAddressValue = function (networkId, immutableObj) {
    var obj = immutableObj;
    // recursive base case, stop here
    if (!isValidObject(immutableObj)) {
        return obj;
    }
    // desctructure the object to create new reference
    obj = __assign({}, immutableObj);
    // iterating over the object using for..in
    for (var key in obj) {
        if (Array.isArray(obj[key]))
            continue; // ignore arrays (e.g. ABIs)
        if (!isValidObject(obj[key]))
            continue; // ignore non-valid objects
        if (key === "address") {
            obj[key] = obj.address[networkId] || null;
        }
        else {
            obj[key] = exports.changeAddressValue(networkId, obj[key]);
        }
    }
    return obj;
};
